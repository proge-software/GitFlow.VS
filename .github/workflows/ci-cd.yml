# This is a basic workflow to help you get started with Actions

name: GitFlow.PR.CD.CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: 
      - develop
      - master

jobs:
  build:
    runs-on: windows-latest

    env:
        Solution_Path: GitFlow.VS.sln
        Test_Project_Path: GitFlow.VS.Tests
        Extension_Project_Path: GitFlow.VS.Extension
        BuildConfiguration: 'VS2019'
    
    steps: 
      - name: checkout repo
        uses: actions/checkout@v2

      - name: fetch all history and tags from all branches for gitversion
        run: git fetch --prune --unshallow

      - name: install gitversion tool
        uses: gittools/actions/gitversion/setup@v0.9
        with:
            versionSpec: '5.1.x'
      
      - name: execute gitversion
        id: gitversion # step id used as reference for output values
        uses: gittools/actions/gitversion/execute@v0.9
        
      - name: print gitversion
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"

      - name: Update manifest version
        run: |
          [xml]$manifest = get-content ".\$env:Extension_Project_Path\source.extension.2019.vsixmanifest"
          $manifest.PackageManifest.Metadata.Identity.Version = "${{ steps.gitversion.outputs.majorMinorPatch }}"
          $manifest.save(".\$env:Extension_Project_Path\source.extension.2019.vsixmanifest")
          
      - name: add version in CHANGELOG.md
        uses: cschleiden/replace-tokens@v1.0
        with:
          files: '${{github.workspace}}/CHANGELOG.md'
        env:
          VERSION: "${{ steps.gitversion.outputs.semVer }}"
          
      - name: Setup Nuget.exe
        uses: warrenbuckley/Setup-Nuget@v1

      - name: Restore packages
        run: nuget restore $env:Solution_Path
      
      - name: Setup MSBuild.exe
        uses: warrenbuckley/Setup-MSBuild@v1
      
      - name: Build with MSBuild
        run: msbuild $env:Solution_Path /property:Configuration=$env:BuildConfiguration

      - name: upload vsix as artifact
        uses: actions/upload-artifact@v2
        with:
          name: GitFlow With PR ${{steps.gitversion.outputs.semVer}}.vsix
          path: ${{ env.Extension_Project_Path }}\bin\${{ env.BuildConfiguration }}\GitFlowVS.2019.vsix 

      - name: create a release
        id: create_release
        if: github.ref == 'refs/heads/develop'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ steps.gitversion.outputs.semVer }}
          release_name: v${{ steps.gitversion.outputs.semVer }}
          draft: true
          prerelease: true

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.Extension_Project_Path }}\bin\${{ env.BuildConfiguration }}\GitFlowVS.2019.vsix
          asset_name: GitFlow With PR ${{steps.gitversion.outputs.semVer}}.vsix
          asset_content_type: application/zip          

      - name: Publish release to marketplace
        id: publish
        uses: mrluje/vs-marketplace-publisher@v2
        with:
          # (Required) Personal access token to perform action on the VS Marketplace
          pat: ${{ secrets.vs_pat }}
          # (Required) Path to the manifest used for the publish
          manifestPath: extension.manifest.json
          useLatestReleaseAsset: true
